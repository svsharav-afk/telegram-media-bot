import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web, ClientSession, ClientTimeout

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
LOG_FILE = "bot_activity.log"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler(LOG_FILE), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

if ADMIN_ID == 0:
    logger.warning("‚ö†Ô∏è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

# === –ú–ò–î–õ–í–ï–† –î–õ–Ø –°–ë–û–†–ö–ò –ò –ú–û–î–ï–†–ê–¶–ò–ò ===
class MediaModerationMiddleware:
    def __init__(self, bot=None):
        self.buffers = {}
        self.bot = bot
        self.CLEANUP_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

    async def _forward_to_admin(self, user_id: int, media_list: list):
        if not media_list or not ADMIN_ID:
            return

        user_info = media_list[0].from_user
        info_msg = (
            f"üì© –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ ID: {user_info.id}\n"
            f"‚Ä¢ Username: @{user_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚Ä¢ –ò–º—è: {user_info.first_name} {user_info.last_name or ''}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(media_list)}"
        )

        try:
            await self.bot.send_message(ADMIN_ID, info_msg)
            for msg in media_list:
                if msg.photo or msg.video:
                    await self.bot.forward_message(
                        chat_id=ADMIN_ID,
                        from_chat_id=msg.chat.id,
                        message_id=msg.message_id
                    )
                    await asyncio.sleep(0.1)
            await self.bot.send_message(ADMIN_ID, "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ—Å–ª–∞–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

    async def _process_buffer(self, user_id: int):
        if user_id not in self.buffers:
            return

        all_media = self.buffers[user_id]
        del self.buffers[user_id]

        await self._forward_to_admin(user_id, all_media)

        for i in range(0, len(all_media), 10):
            album = all_media[i:i + 10]
            media_group = MediaGroupBuilder()
            for msg in album:
                if msg.photo:
                    media_group.add_photo(media=msg.photo[-1].file_id)
                elif msg.video:
                    media_group.add_video(media=msg.video.file_id)

            try:
                await album[0].answer_media_group(media=media_group.build())
                photo_count = sum(1 for m in album if m.photo)
                video_count = sum(1 for m in album if m.video)
                logger.info(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
                            f"User {user_id} (@{album[0].from_user.username or 'unknown'}): "
                            f"processed {len(album)} files ({photo_count} photos, {video_count} videos)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    async def __call__(self, handler, message: Message, data):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
        if message.from_user.id == ADMIN_ID:
            if message.text == "/admin":
                await self._show_admin_panel(message)
                return
            elif message.text == "/logs":
                await self._show_logs(message)
                return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
        has_media = message.photo or message.video
        if has_media:
            user_id = message.from_user.id
            if user_id not in self.buffers:
                self.buffers[user_id] = []
                asyncio.create_task(self._delayed_processing(user_id))
            if not any(m.message_id == message.message_id for m in self.buffers[user_id]):
                self.buffers[user_id].append(message)
                return  # –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ

        # –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        return await handler(message, data)

    async def _delayed_processing(self, user_id: int):
        await asyncio.sleep(1.5)
        await self._process_buffer(user_id)

    async def _show_admin_panel(self, message: Message):
        active_users = len(self.buffers)
        total_files = sum(len(buf) for buf in self.buffers.values())
        status = f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_files}"
        await message.answer(status)

    async def _show_logs(self, message: Message):
        if not os.path.exists(LOG_FILE):
            await message.answer("–õ–æ–≥–∏ –ø—É—Å—Ç—ã")
            return
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                logs = f.readlines()[-20:]
            log_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n" + "".join(logs)
            await message.answer(log_text[:4000])
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

    async def _cleanup_inactive_buffers(self):
        while True:
            await asyncio.sleep(self.CLEANUP_TIMEOUT)
            current_time = datetime.now().timestamp()
            inactive_users = []
            for user_id, buffer in self.buffers.items():
                if buffer and (current_time - buffer[-1].date.timestamp()) > self.CLEANUP_TIMEOUT:
                    inactive_users.append(user_id)
            for user_id in inactive_users:
                del self.buffers[user_id]
                logger.info(f"–û—á–∏—â–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    timeout = ClientTimeout(total=60.0, connect=15.0, sock_read=30.0, sock_connect=15.0)
    session = ClientSession(timeout=timeout)

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"), session=session)
    dp = Dispatcher()

    # –°–±—Ä–æ—Å –∑–∞–≤–∏—Å—à–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    await bot.delete_webhook(drop_pending_updates=True)

    middleware = MediaModerationMiddleware(bot=bot)
    dp.message.middleware(middleware)

    @dp.message(F.text == "/start")
    async def cmd_start(message: Message):
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–±–∏—Ä–∞—é —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –≤ –∞–ª—å–±–æ–º—ã üìÇ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–µ–¥–∏–∞ ‚Äî –∏ —è —Å–æ–±–µ—Ä—É –∏—Ö –≤ –∞–ª—å–±–æ–º."
        )
        await message.answer(welcome_text)

    @dp.message(F.text == "/help")
    async def cmd_help(message: Message):
        help_text = (
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
            "1. –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.\n"
            "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç –∏—Ö –≤ –∞–ª—å–±–æ–º—ã –ø–æ 10 —Ñ–∞–π–ª–æ–≤.\n"
            "3. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ ~1.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞."
        )
        await message.answer(help_text)

    port = int(os.getenv("PORT", "10000"))
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/")
    setup_application(app, dp, bot=bot)

    async def on_shutdown(app):
        await bot.session.close()
        await session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")

    app.on_cleanup.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()

    # Render –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
    webhook_url = f"https://localhost:{port}/"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    asyncio.create_task(middleware._cleanup_inactive_buffers())
    await asyncio.Event().wait()


if __name__ == "__main__":
    if not os.path.exists(LOG_FILE):
        open(LOG_FILE, "w", encoding="utf-8").close()
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
