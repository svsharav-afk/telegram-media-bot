import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò (–ù–ï –ò–ó–ú–ï–ù–Ø–ô–¢–ï –í –≠–¢–û–ú –§–ê–ô–õ–ï) ===
# –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
LOG_FILE = "bot_activity.log"

# === –ú–ò–î–õ–í–ï–† –î–õ–Ø –°–ë–û–†–ö–ò –ò –ú–û–î–ï–†–ê–¶–ò–ò ===
class MediaModerationMiddleware:
    def __init__(self, bot=None):
        # –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: [—Å–æ–æ–±—â–µ–Ω–∏—è]}
        self.buffers = {}
        self.bot = bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞

    async def _forward_to_admin(self, user_id: int, media_list: list):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        if not media_list or not ADMIN_ID:
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = media_list[0].from_user
        info_msg = (
            f"üì© –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ ID: {user_info.id}\n"
            f"‚Ä¢ Username: @{user_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚Ä¢ –ò–º—è: {user_info.first_name} {user_info.last_name or ''}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(media_list)}"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.bot.send_message(ADMIN_ID, info_msg)
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ–¥–Ω–æ–º—É
            for msg in media_list:
                if msg.photo or msg.video:
                    await self.bot.forward_message(
                        chat_id=ADMIN_ID,
                        from_chat_id=msg.chat.id,
                        message_id=msg.message_id
                    )
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await self.bot.send_message(
                ADMIN_ID,
                "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ—Å–ª–∞–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    async def _process_buffer(self, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º—ã"""
        if user_id not in self.buffers:
            return
            
        all_media = self.buffers[user_id]
        del self.buffers[user_id]
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å—ë)
        await self._forward_to_admin(user_id, all_media)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–ª—å–±–æ–º—ã –ø–æ 10 —Ñ–∞–π–ª–æ–≤
        for i in range(0, len(all_media), 10):
            album = all_media[i:i+10]
            media_group = MediaGroupBuilder()
            
            for msg in album:
                if msg.photo:
                    media_group.add_photo(media=msg.photo[-1].file_id)
                elif msg.video:
                    media_group.add_video(media=msg.video.file_id)
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                await album[0].answer_media_group(
                    media=media_group.build(),
                    request_timeout=120
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º
                photo_count = sum(1 for m in album if m.photo)
                video_count = sum(1 for m in album if m.video)
                self._log_activity(
                    album[0].from_user.id,
                    album[0].from_user.username or "unknown",
                    len(album),
                    photo_count,
                    video_count
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")

    def _log_activity(self, user_id, username, total, photos, videos):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] User {user_id} (@{username}): "
                    f"processed {total} files "
                    f"({photos} photos, {videos} videos)\n")

    async def __call__(self, handler, message: Message, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –º–µ–¥–∏–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–æ–π
        if message.from_user.id == ADMIN_ID:
            if message.text == "/admin":
                await self._show_admin_panel(message)
                return await handler(message, data)
            elif message.text == "/logs":
                await self._show_logs(message)
                return await handler(message, data)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
        has_media = message.photo or message.video
        
        # 3. –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –±—É—Ñ–µ—Ä
        if has_media:
            user_id = message.from_user.id
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.buffers:
                self.buffers[user_id] = []
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
                asyncio.create_task(self._delayed_processing(user_id))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏)
            if not any(m.message_id == message.message_id for m in self.buffers[user_id]):
                self.buffers[user_id].append(message)
        
        return await handler(message, data)
    
    async def _delayed_processing(self, user_id: int):
        """–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞"""
        await asyncio.sleep(1.5)
        await self._process_buffer(user_id)
    
    async def _show_admin_panel(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        active_users = len(self.buffers)
        total_files = sum(len(buf) for buf in self.buffers.values())
        
        status = "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        status += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        status += f"‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_files}\n\n"
        status += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        status += "/logs - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
        
        await message.answer(status)
    
    async def _show_logs(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
        if not os.path.exists(LOG_FILE):
            await message.answer("–õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã")
            return
            
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                logs = f.readlines()[-20:]
            
            if not logs:
                await message.answer("–õ–æ–≥–∏ –ø—É—Å—Ç—ã")
                return
                
            log_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n" + "".join(logs)
            await message.answer(log_text[:4000])
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

async def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.message.middleware(MediaModerationMiddleware(bot=bot))
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message()
    async def handle_all(message: Message):
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.getenv("PORT", "8080"))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_path = "/webhook"
    app = web.Application()
    
    SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    ).register(app, path=webhook_path)
    
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ CTRL+C")
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())