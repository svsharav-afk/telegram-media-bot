import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
LOG_FILE = "bot_activity.log"

if ADMIN_ID == 0:
    print("‚ö†Ô∏è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

# === –ú–ò–î–õ–í–ï–† –î–õ–Ø –°–ë–û–†–ö–ò –ò –ú–û–î–ï–†–ê–¶–ò–ò ===
class MediaModerationMiddleware:
    def __init__(self, bot=None):
        self.buffers = {}
        self.bot = bot
        # –¢–∞–π–º–∞—É—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—É—Ñ–µ—Ä–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.CLEANUP_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

    async def _forward_to_admin(self, user_id: int, media_list: list):
        if not media_list or not ADMIN_ID:
            return
            
        user_info = media_list[0].from_user
        info_msg = (
            f"üì© –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ ID: {user_info.id}\n"
            f"‚Ä¢ Username: @{user_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚Ä¢ –ò–º—è: {user_info.first_name} {user_info.last_name or ''}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(media_list)}"
        )
        
        try:
            await self.bot.send_message(ADMIN_ID, info_msg)
            for msg in media_list:
                if msg.photo or msg.video:
                    await self.bot.forward_message(
                        chat_id=ADMIN_ID,
                        from_chat_id=msg.chat.id,
                        message_id=msg.message_id
                    )
                    await asyncio.sleep(0.1)
            await self.bot.send_message(ADMIN_ID, "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ—Å–ª–∞–Ω—ã.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

    async def _process_buffer(self, user_id: int):
        if user_id not in self.buffers:
            return
            
        all_media = self.buffers[user_id]
        del self.buffers[user_id]
        
        await self._forward_to_admin(user_id, all_media)
        
        for i in range(0, len(all_media), 10):
            album = all_media[i:i+10]
            media_group = MediaGroupBuilder()
            for msg in album:
                if msg.photo:
                    media_group.add_photo(media=msg.photo[-1].file_id)
                elif msg.video:
                    media_group.add_video(media=msg.video.file_id)
            
            try:
                await album[0].answer_media_group(
                    media=media_group.build(),
                    request_timeout=120
                )
                photo_count = sum(1 for m in album if m.photo)
                video_count = sum(1 for m in album if m.video)
                self._log_activity(
                    album[0].from_user.id,
                    album[0].from_user.username or "unknown",
                    len(album),
                    photo_count,
                    video_count
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    def _log_activity(self, user_id, username, total, photos, videos):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            with open(LOG_FILE, "a", encoding="utf-8") as f:
                f.write(f"[{timestamp}] User {user_id} (@{username}): "
                        f"processed {total} files "
                        f"({photos} photos, {videos} videos)\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

    async def __call__(self, handler, message: Message, data):
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
        if message.from_user.id == ADMIN_ID:
            if message.text == "/admin":
                await self._show_admin_panel(message)
                return
            elif message.text == "/logs":
                await self._show_logs(message)
                return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
        has_media = message.photo or message.video
        if has_media:
            user_id = message.from_user.id
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.buffers:
                self.buffers[user_id] = []
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
                asyncio.create_task(self._delayed_processing(user_id))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (–±–µ–∑ –¥—É–±–ª–µ–π)
            if not any(m.message_id == message.message_id for m in self.buffers[user_id]):
                self.buffers[user_id].append(message)
                # –í–ê–ñ–ù–û: –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ
                return
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        return await handler(message, data)
    
    async def _delayed_processing(self, user_id: int):
        """–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞"""
        await asyncio.sleep(1.5)
        await self._process_buffer(user_id)
    
    async def _show_admin_panel(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        active_users = len(self.buffers)
        total_files = sum(len(buf) for buf in self.buffers.values())
        status = f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_files}"
        await message.answer(status)
    
    async def _show_logs(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
        if not os.path.exists(LOG_FILE):
            await message.answer("–õ–æ–≥–∏ –ø—É—Å—Ç—ã")
            return
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                logs = f.readlines()[-20:]
            log_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n" + "".join(logs)
            await message.answer(log_text[:4000])
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def _cleanup_inactive_buffers(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏"""
        await asyncio.sleep(self.CLEANUP_TIMEOUT)
        
        current_time = datetime.now().timestamp()
        inactive_users = []
        
        for user_id, buffer in self.buffers.items():
            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ CLEANUP_TIMEOUT —Å–µ–∫—É–Ω–¥
            if buffer and (current_time - buffer[-1].date.timestamp()) > self.CLEANUP_TIMEOUT:
                inactive_users.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
        for user_id in inactive_users:
            del self.buffers[user_id]
            print(f"–û—á–∏—â–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    middleware = MediaModerationMiddleware(bot=bot)
    dp.message.middleware(middleware)
    
    # –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –•–ï–ù–î–õ–ï–†–´ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø dp
    @dp.message(F.text == "/start")
    async def cmd_start(message: Message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = (
            "Create albums from forwarded media!\n\n"
            "Features ‚ú®\n"
            "‚Ä¢ Auto creation, just forward all the items at once and the bot will reply with a nice media album.\n"
            "‚Ä¢ Images and videos supported."
        )
        await message.answer(welcome_text)

    @dp.message(F.text == "/help")
    async def cmd_help(message: Message):
        """–ö—Ä–∞—Ç–∫–∞—è –ø–æ–º–æ—â—å"""
        help_text = (
            "How to use üõ†\n\n"
            "1. Send photos and videos one by one or in groups.\n"
            "2. The bot will automatically collect them into albums of 10 items.\n"
            "3. You'll get the result 1.5 seconds after the last file.\n\n"
            "üìå Example:\n"
            "You sent 19 photos ‚Üí bot sends 2 albums: (10 + 9)\n\n"
            "‚ö†Ô∏è Important: send as photo/video, not as file."
        )
        await message.answer(help_text)

    @dp.message()
    async def handle_all(message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ö–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
        if message.text and message.text.startswith("/"):
            return
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è middleware
        pass

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Render
    port = int(os.getenv("PORT", "10000"))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_path = "/"
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=webhook_path)
    setup_application(app, dp, bot=bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()

    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', 'localhost')}:{port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–æ–≤
    asyncio.create_task(middleware._cleanup_inactive_buffers())
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.Event().wait()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(LOG_FILE):
        open(LOG_FILE, "w", encoding="utf-8").close()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")